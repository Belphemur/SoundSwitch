name: .NET

on:
  push:
    branches: [ dev, master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ dev, master ]
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  # DOTNET_CLI_TELEMETRY_OPTOUT: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PROJECT_NAME: "SoundSwitch"
  ARCH: "win-x64"
  FRAMEWORK: "net5.0-windows"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-anycpu-${{ hashFiles('**/packages.config') }}
          restore-keys: |
            ${{ runner.os }}-nuget-anycpu
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore ${{env.PROJECT_NAME}}/${{env.PROJECT_NAME}}.csproj
  prerelease:
    env:
      DAV_SERVER: "https://nc.aaflalo.me/remote.php/webdav"
      DAV_USER: ${{secrets.DAV_USER}}
      DAV_PASS: ${{secrets.DAV_PASS}}
    needs: build
    if: github.ref == 'refs/heads/dev'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{env.ARCH}}-${{ hashFiles('**/packages.config') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{env.ARCH}}
      - name: Restore
        run: dotnet restore -r ${{ env.ARCH }}
      - name: Build pre-release
        run: dotnet publish -c Release --no-restore -r ${{ env.ARCH }} /p:PublishTrimmed=true ${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj
      - name: Set Env var from GitHub  
        uses: rlespinasse/github-slug-action@v3.x
      - name: Zip Build ${{env.PROJECT_NAME}}-${{env.GITHUB_REF_SLUG}}
        run: tar cafv ${{env.PROJECT_NAME}}-${{env.GITHUB_REF_SLUG}}.zip -C ${{ env.PROJECT_NAME }}-${{env.GITHUB_SHA_SHORT}} ${{ env.PROJECT_NAME }}\bin\Release\${{ env.FRAMEWORK }}\${{ env.ARCH }}\publish\*
      - name: Upload Artifact
        run: curl -u "${{env.DAV_USER}}:${{env.DAV_PASS}}" -X PUT ${{env.DAV_SERVER}}/${{env.PROJECT_NAME}}/${{env.PROJECT_NAME}}-${{env.GITHUB_REF_SLUG}}.zip --upload-file ${{env.PROJECT_NAME}}-${{env.GITHUB_REF_SLUG}}.zip

  prepare-release:
      needs: build
      if: github.ref == 'refs/heads/master'
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Setup Node.js
          uses: actions/setup-node@v2
          with:
            node-version: 14
        - name: Cache node modules
          uses: actions/cache@v2
          env:
            cache-name: cache-node-modules
          with:
            # npm cache files are stored in `~/.npm` on Linux/macOS
            path: ~/.npm
            key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/packages.config') }}
            restore-keys: |
              ${{ runner.os }}-build-${{ env.cache-name }}-
              ${{ runner.os }}-build-
              ${{ runner.os }}-    
        - name: Install semantic-release dependencies
          run: npm ci
        - name: Release
          run: npx semantic-release
